delete
{# ----Hostname---- #}
set system host-name {{ router['router_model'] }}.{{ router['router_location'] }}
{# ----Root password---- #}
set system root-authentication encrypted-password "{{ root_encrypted_password }}"
{# ----Name servers---- #}
{% for name_server in name_servers %}
set system name-server {{ name_server }}
{% endfor %}
{# ----USERS---- #}
{# --Rocky user --#}
set system login user rocky uid 2001
set system login user rocky class super-user
set system login user rocky authentication ssh-rsa "{{ rocky_rsa}}"
{# --User robot-- #}
set system login user robot uid 2002
set system login user robot class super-user
set system login user robot authentication ssh-rsa "{{ robot_rsa }}"
{# -- user {{ ROUTER_USER }} -- #}
set system login class {{ ROUTER_USER }} permissions shell
set system login class {{ ROUTER_USER }} permissions view
set system login class {{ ROUTER_USER }} allow-commands "(show .*)|(match .*)|(display .*)|(no-more)|(start .*)"
set system login class {{ ROUTER_USER }} deny-commands "(clear .*)|(file .*)|(help .*)|(load .*)|(monitor .*)|(op .*)|(request .*)|(save .*)|(set .*)|({{ ROUTER_USER }} .*)"
set system login class {{ ROUTER_USER }} deny-configuration .*
set system login user {{ ROUTER_USER }} uid 2003
set system login user {{ ROUTER_USER }} class {{ ROUTER_USER }}
set system login user {{ ROUTER_USER }} authentication encrypted-password {{ ROUTER_PASSWORD }}
{# ----System services---- #}
set system services ssh
set system services netconf ssh connection-limit 250 rate-limit 250
set system commit persist-groups-inheritance
set system configuration-database extend-size
{# ----Security----------- #}
set security policies global policy global-deny-all-policy match source-address any
set security policies global policy global-deny-all-policy match destination-address any
set security policies global policy global-deny-all-policy match application any
set security policies global policy global-deny-all-policy then deny
set security policies global policy global-deny-all-policy then log session-init
set security policies global policy global-deny-all-policy then count
set security policies default-policy deny-all
set security forwarding-options family inet6 mode flow-based
set security log mode event
{# -------- Policy logs ------------#}
set system syslog file policy_session user info
set system syslog file policy_session firewall any
set system syslog file policy_session match RT_FLOW
set system syslog file policy_session archive size 5m
set system syslog file policy_session archive files 15
set system syslog file policy_session archive world-readable
set system syslog file policy_session structured-data
{# ----------------------------------------RoboSOC dynamic address and policies------------------------------------------- #}
set security dynamic-address traceoptions file robosoc_blocklist_trace size 1m files 2 world-readable
set security dynamic-address traceoptions level all flag all
set security dynamic-address feed-server CloudCIX hostname www.cloudcix.com
set security dynamic-address feed-server CloudCIX update-interval 172800
set security dynamic-address feed-server CloudCIX hold-interval 518400
{# Note: feed-name length range [1, 16] #}
set security dynamic-address feed-server CloudCIX feed-name IPBlocklistFeed path /srx_ipblocklist.txt.gz
{# update interval 1 hour, hold interval 24hrs(time to hold ips in case update fails) #}
set security dynamic-address feed-server CloudCIX feed-name IPBlocklistFeed update-interval 3600 hold-interval 86399
set security dynamic-address address-name RoboSOC.Blocklist_Address description www.cloudcix.com/srx_ipblocklist.txt.gz
set security dynamic-address address-name RoboSOC.Blocklist_Address profile feed-name IPBlocklistFeed
{# inbound common policy #}
set groups PUBLIC-VRF security policies from-zone PUBLIC to-zone <*> policy RoboSOC_Blocklist_In_Block match source-address RoboSOC.Blocklist_Address destination-address any application any
set groups PUBLIC-VRF security policies from-zone PUBLIC to-zone <*> policy RoboSOC_Blocklist_In_Block then deny log session-init
{# outbound common policy #}
set groups VRF-PUBLIC security policies from-zone <*> to-zone PUBLIC policy RoboSOC_Blocklist_Out_Block match source-address any destination-address RoboSOC.Blocklist_Address application any
set groups VRF-PUBLIC security policies from-zone <*> to-zone PUBLIC policy RoboSOC_Blocklist_Out_Block then deny log session-init
{# ==================PORT CONFIGURATION============================== #}
{% for port in ports %}
{# ----------------------------------------------------------PUBLIC---------------------------------------------------------- #}
{% if port['function'] == 'Floating' %}
set interfaces {{ port['name'] }} description public.interface
set interfaces {{ port['name'] }} unit 0 description PUBLIC
set security zones security-zone PUBLIC interfaces {{ port['name'] }}.0 host-inbound-traffic system-services ping
set security zones security-zone PUBLIC interfaces {{ port['name'] }}.0 host-inbound-traffic system-services traceroute
set security zones security-zone PUBLIC interfaces {{ port['name'] }}.0 host-inbound-traffic system-services ike
{# policy option for all ipv6 imports and exports #}
set policy-options policy-statement Leaked.From.Public term IPv6.Connected from protocol direct
set policy-options policy-statement Leaked.From.Public term IPv6.Connected then accept
set policy-options policy-statement Leaked.From.Public term IPv6.Default from route-filter ::/0 exact
set policy-options policy-statement Leaked.From.Public term IPv6.Default then accept
set policy-options policy-statement Leaked.From.Public term deny-all then reject
{# Main route table entries (so no separate routing instance) #}
{# Routing options #}
set routing-options rib-groups Public.To.Vr export-rib inet6.0
set routing-options rib-groups Public.To.Vr import-rib inet6.0
set routing-options rib-groups Public.To.Vr import-policy Leaked.From.Public
set routing-options interface-routes rib-group inet6 Public.To.Vr
set routing-options rib inet6.0 static rib-group Public.To.Vr
{% for port_config in port['port_configs'] %}
set interfaces {{ port['name'] }} unit 0 family {{ port_config['type'] }} address {{ port_config['ip'] }}/{{ port_config['mask'] }}
{% if port_config['type'] == 'inet' %}
set routing-options static route 0.0.0.0/0 next-hop {{ port_config['gateway'] }}
{% elif port_config['type'] == 'inet6' %}
set routing-options rib inet6.0 static route ::/0 next-hop {{ port_config['gateway'] }}
{% endif %}
{% endfor %}
{# Rule Set for all inbound nats #}
set security nat static rule-set all-inbound-static-nat from zone PUBLIC
{% endif %}
{# -----------------------------------------------------------PRIVATE------------------------------------------------------- #}
{% if port['function'] == 'Private' %}
set interfaces {{ port['name'] }} description southbound.interface
set interfaces {{ port['name'] }} vlan-tagging
{% endif %}
{# -----------------------------------------------------Management------------------------------------------------------- #}
{% if port['function'] == 'Management' %}
set groups mgmt security zones security-zone mgmt interfaces {{ port['name'] }}.0 host-inbound-traffic system-services any-service
set groups mgmt interfaces {{ port['name'] }} description mgmt.interface
set groups mgmt interfaces {{ port['name'] }} unit 0 description management
{% for port_config in port['port_configs'] %}
set groups mgmt interfaces {{ port['name'] }} unit 0 family {{ port_config['type'] }} address {{ port_config['ip'] }}/{{ port_config['mask'] }}
{% if port_config['type'] == 'inet' %}
set groups mgmt routing-instances MGMT routing-options static route 0.0.0.0/0 next-hop {{ port_config['gateway'] }}
{% elif port_config['type'] == 'inet6' %}
set groups mgmt routing-instances MGMT routing-options rib MGMT.{{ port_config['type'] }}.0 static route ::/0 next-hop {{ port_config['gateway'] }}
{% endif %}
{% endfor %}
{# Routing options #}
set groups mgmt routing-options rib-groups Public.To.Vr import-rib MGMT.inet6.0
set groups mgmt routing-options rib-groups Mgmt.To.Public export-rib MGMT.inet6.0
set groups mgmt routing-options rib-groups Mgmt.To.Public import-rib MGMT.inet6.0
set groups mgmt routing-options rib-groups Mgmt.To.Public import-rib inet6.0
set groups mgmt routing-instances MGMT instance-type virtual-router
set groups mgmt routing-instances MGMT interface {{ port['name'] }}.0
set groups mgmt routing-instances MGMT routing-options interface-routes rib-group inet6 Mgmt.To.Public
{# security policies #}
{% for address in mgmt_access_addresses %}
set groups mgmt security address-book global address mgmt-{{ address[2] }} description {{ address[1] }}
set groups mgmt security address-book global address mgmt-{{ address[2] }} {{ address[0] }}
set groups mgmt security address-book global address-set mgmt-access-addresses address mgmt-{{ address[2] }}
{% endfor %}
set groups mgmt security policies from-zone PUBLIC to-zone mgmt apply-groups PUBLIC-VRF
set groups mgmt security policies from-zone PUBLIC to-zone mgmt policy mgmt-inbound-0 match source-address mgmt-access-addresses destination-address any application any
set groups mgmt security policies from-zone PUBLIC to-zone mgmt policy mgmt-inbound-0 then permit
set groups mgmt security policies from-zone PUBLIC to-zone mgmt policy mgmt-inbound-0 then log session-init
{# ------- #}
set groups mgmt security policies from-zone mgmt to-zone PUBLIC apply-groups VRF-PUBLIC
set groups mgmt security policies from-zone mgmt to-zone PUBLIC policy mgmt-outbound-permit-all match source-address any destination-address any application any
set groups mgmt security policies from-zone mgmt to-zone PUBLIC policy mgmt-outbound-permit-all then permit
set groups mgmt security policies from-zone mgmt to-zone PUBLIC policy mgmt-outbound-permit-all then log session-init
{# ------- #}
set groups mgmt security policies from-zone mgmt to-zone mgmt policy mgmt-intrazone-permit match source-address any destination-address any application any
set groups mgmt security policies from-zone mgmt to-zone mgmt policy mgmt-intrazone-permit then permit
set groups mgmt security policies from-zone mgmt to-zone mgmt policy mgmt-intrazone-permit then log session-init
set apply-groups mgmt
{% endif %}
{#-------------------------------------------------------OOB----------------------------------------------------------------------- #}
{% if port['function'] == 'OOB' %}
set groups oob system services web-management https system-generated-certificate
set groups oob system services web-management https interface {{ port['name'] }}.0
{% if router['router_model'] == 'SRX300' %}
set groups oob security zones security-zone OOB interfaces {{ port['name'] }}.0 host-inbound-traffic system-services https
set groups oob security zones security-zone OOB interfaces {{ port['name'] }}.0 host-inbound-traffic system-services ping
set groups oob security zones security-zone OOB interfaces {{ port['name'] }}.0 host-inbound-traffic system-services ssh
set groups oob security zones security-zone OOB interfaces {{ port['name'] }}.0 host-inbound-traffic system-services traceroute
{% endif %}
{% for port_config in port['port_configs'] %}
set groups oob interfaces {{ port['name'] }}.0 family inet address {{ port_config['ip'] }}/{{ port_config['mask'] }}
set groups oob routing-options static route 10.0.0.0/8 next-hop {{ port_config['gateway'] }}
{% endfor %}
set apply-groups oob
{% endif %}
{% endfor %}
